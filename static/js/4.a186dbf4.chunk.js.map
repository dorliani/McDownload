{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","valid","touched","password","minLength","isSignup","inputChangedHandler","event","controlName","updatedControls","updateObject","target","checkValidity","setState","submitHandler","preventDefault","props","onAuth","switchAuthModeHandler","prevState","this","buildingBurger","authRedirectPath","onSetAuthRedirectPath","formElementsArray","key","push","id","config","form","map","formElement","invalid","shouldValidate","changed","loading","errorMessage","error","message","authRedirect","isAuthenticated","to","className","classes","onSubmit","btnType","clicked","Component","connect","auth","token","burgerBuilder","building","dispatch","actions","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","options","option","displayValue","Input","Label","label"],"mappings":"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","file":"static/js/4.a186dbf4.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__2Vvgl\"};","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport Input from '../../components/UI/Input/Input';\r\nimport Button from '../../components/UI/Button/Button';\r\nimport Spinner from '../../components/UI/Spinner/Spinner';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\nclass Auth extends Component {\r\n    state = {\r\n        controls: {\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Mail Address'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            password: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'password',\r\n                    placeholder: 'Password'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 6\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            }\r\n        },\r\n        isSignup: true\r\n    }\r\n\r\n    componentDidMount () {\r\n        if ( !this.props.buildingBurger && this.props.authRedirectPath !== '/' ) {\r\n            this.props.onSetAuthRedirectPath();\r\n        }\r\n    }\r\n\r\n    inputChangedHandler = ( event, controlName ) => {\r\n        const updatedControls = updateObject( this.state.controls, {\r\n            [controlName]: updateObject( this.state.controls[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity( event.target.value, this.state.controls[controlName].validation ),\r\n                touched: true\r\n            } )\r\n        } );\r\n        this.setState( { controls: updatedControls } );\r\n    }\r\n\r\n    submitHandler = ( event ) => {\r\n        event.preventDefault();\r\n        this.props.onAuth( this.state.controls.email.value, this.state.controls.password.value, this.state.isSignup );\r\n    }\r\n\r\n    switchAuthModeHandler = () => {\r\n        this.setState( prevState => {\r\n            return { isSignup: !prevState.isSignup };\r\n        } );\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for ( let key in this.state.controls ) {\r\n            formElementsArray.push( {\r\n                id: key,\r\n                config: this.state.controls[key]\r\n            } );\r\n        }\r\n\r\n        let form = formElementsArray.map( formElement => (\r\n            <Input\r\n                key={formElement.id}\r\n                elementType={formElement.config.elementType}\r\n                elementConfig={formElement.config.elementConfig}\r\n                value={formElement.config.value}\r\n                invalid={!formElement.config.valid}\r\n                shouldValidate={formElement.config.validation}\r\n                touched={formElement.config.touched}\r\n                changed={( event ) => this.inputChangedHandler( event, formElement.id )} />\r\n        ) );\r\n\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />\r\n        }\r\n\r\n        let errorMessage = null;\r\n\r\n        if ( this.props.error ) {\r\n            errorMessage = (\r\n                <p>{this.props.error.message}</p>\r\n            );\r\n        }\r\n\r\n        let authRedirect = null;\r\n        if ( this.props.isAuthenticated ) {\r\n            authRedirect = <Redirect to={this.props.authRedirectPath} />\r\n        }\r\n\r\n        return (\r\n            <div className={classes.Auth}>\r\n                {authRedirect}\r\n                {errorMessage}\r\n                <form onSubmit={this.submitHandler}>\r\n                    {form}\r\n                    <Button btnType=\"Success\">SUBMIT</Button>\r\n                </form>\r\n                <Button\r\n                    clicked={this.switchAuthModeHandler}\r\n                    btnType=\"Danger\">SWITCH TO {this.state.isSignup ? 'SIGNIN' : 'SIGNUP'}</Button>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated: state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: ( email, password, isSignup ) => dispatch( actions.auth( email, password, isSignup ) ),\r\n        onSetAuthRedirectPath: () => dispatch( actions.setAuthRedirectPath( '/' ) )\r\n    };\r\n};\r\n\r\nexport default connect( mapStateToProps, mapDispatchToProps )( Auth );","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n\tlet inputElement = null;\r\n\tconst inputClasses = [classes.InputElement]\r\n\r\n\tif(props.invalid && props.shouldValidate && props.touched) {\r\n\t\tinputClasses.push(classes.Invalid)\r\n\t}\r\n\r\n\tswitch(props.elementType) {\r\n\t\tcase('input'):\r\n\t\t\tinputElement = <input \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig} \r\n\t\t\t\tonChange={props.changed}\r\n\t\t\t\tvalue={props.value}/>\r\n\t\t\tbreak;\r\n\r\n\t\tcase('textarea'):\r\n\t\t\tinputElement = <textarea \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig} \r\n\t\t\t\tonChange={props.changed}\t\r\n\t\t\t\tvalue={props.value}/>\r\n\t\t\tbreak;\r\n\r\n\t\tcase('select'):\r\n\t\t\tinputElement = (<select \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig}\r\n\t\t\t\tonChange={props.changed} \r\n\t\t\t\tvalue={props.value}>\r\n\t\t\t\t{props.elementConfig.options.map(option => (\r\n\t\t\t\t\t<option key={option.value} value={option.value}>\r\n\t\t\t\t\t\t{option.displayValue}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t)\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tinputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Input}>\r\n\t\t\t<label className={classes.Label}>{props.label}</label>\r\n\t\t\t{inputElement}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2JHz7\",\"Label\":\"Input_Label__2rmU9\",\"InputElement\":\"Input_InputElement__3UQ5K\",\"Invalid\":\"Input_Invalid__2dmWw\"};"],"sourceRoot":""}