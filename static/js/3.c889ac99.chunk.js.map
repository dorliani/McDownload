{"version":3,"sources":["components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","components/UI/Input/Input.js","components/UI/Input/Input.module.css","components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["checkoutSummary","props","className","classes","CheckoutSummary","style","width","margin","Burger","ingredients","Button","btnType","clicked","checkoutCancelled","checkoutContinued","ContactData","state","orderForm","name","elementType","elementConfig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","isNumeric","country","email","isEmail","deliveryMethod","options","displayValue","formIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","order","ings","price","orderData","userId","onOrderBurger","token","inputChangedHandler","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","setState","formElementsArray","key","this","push","id","config","form","onSubmit","map","formElement","Input","invalid","shouldValidate","changed","disabled","loading","Spinner","Component","connect","burgerBuilder","totalPrice","auth","dispatch","actions","withErrorHandler","axios","Checkout","checkoutCancelledHandler","history","goBack","checkoutContinuedHandler","replace","summary","to","purchasedRedirect","purchased","path","match","component","input","inputElement","inputClasses","InputElement","Invalid","join","onChange","option","Label","label","module","exports"],"mappings":"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","file":"static/js/3.c889ac99.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst checkoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We hope it tastes well!</h1>\r\n            <div style={{width: '100%', margin: 'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.checkoutCancelled}>CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\"\r\n                clicked={props.checkoutContinued}>CONTINUE</Button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default checkoutSummary;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Button from '../../../components/UI/Button/Button';\r\nimport Spinner from '../../../components/UI/Spinner/Spinner';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Input from '../../../components/UI/Input/Input';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler'\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\nclass ContactData extends Component {\r\n    state = {\r\n        orderForm: {\r\n            name: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Your Name'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            street: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Street'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            zipCode: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'ZIP Code'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    minLength: 5,\r\n                    maxLength: 5,\r\n                    isNumeric: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            country: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'text',\r\n                    placeholder: 'Country'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            email: {\r\n                elementType: 'input',\r\n                elementConfig: {\r\n                    type: 'email',\r\n                    placeholder: 'Your E-Mail'\r\n                },\r\n                value: '',\r\n                validation: {\r\n                    required: true,\r\n                    isEmail: true\r\n                },\r\n                valid: false,\r\n                touched: false\r\n            },\r\n            deliveryMethod: {\r\n                elementType: 'select',\r\n                elementConfig: {\r\n                    options: [\r\n                        {value: 'fastest', displayValue: 'Fastest'},\r\n                        {value: 'cheapest', displayValue: 'Cheapest'}\r\n                    ]\r\n                },\r\n                value: 'fastest',\r\n                validation: {},\r\n                valid: true\r\n            }\r\n        },\r\n        formIsValid: false\r\n    }\r\n\r\n    orderHandler = ( event ) => {\r\n        event.preventDefault();\r\n  \r\n        const formData = {};\r\n        for (let formElementIdentifier in this.state.orderForm) {\r\n            formData[formElementIdentifier] = this.state.orderForm[formElementIdentifier].value;\r\n        }\r\n        const order = {\r\n            ingredients: this.props.ings,\r\n            price: this.props.price,\r\n            orderData: formData,\r\n            userId: this.props.userId\r\n        }\r\n\r\n        this.props.onOrderBurger(order, this.props.token);\r\n        \r\n    }\r\n\r\n    inputChangedHandler = (event, inputIdentifier) => {\r\n        \r\n        const updatedFormElement = updateObject(this.state.orderForm[inputIdentifier], {\r\n            value: event.target.value,\r\n            valid: checkValidity(event.target.value, this.state.orderForm[inputIdentifier].validation),\r\n            touched: true\r\n        });\r\n        const updatedOrderForm = updateObject(this.state.orderForm, {\r\n            [inputIdentifier]: updatedFormElement\r\n        });\r\n        \r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        this.setState({orderForm: updatedOrderForm, formIsValid: formIsValid});\r\n    }\r\n\r\n    render () {\r\n        const formElementsArray = [];\r\n        for (let key in this.state.orderForm) {\r\n            formElementsArray.push({\r\n                id: key,\r\n                config: this.state.orderForm[key]\r\n            });\r\n        }\r\n        let form = (\r\n            <form onSubmit={this.orderHandler}>\r\n                {formElementsArray.map(formElement => (\r\n                    <Input \r\n                        key={formElement.id}\r\n                        elementType={formElement.config.elementType}\r\n                        elementConfig={formElement.config.elementConfig}\r\n                        value={formElement.config.value}\r\n                        invalid={!formElement.config.valid}\r\n                        shouldValidate={formElement.config.validation}\r\n                        touched={formElement.config.touched}\r\n                        changed={(event) => this.inputChangedHandler(event, formElement.id)} />\r\n                ))}\r\n                <Button btnType=\"Success\" disabled={!this.state.formIsValid}>ORDER</Button>\r\n            </form>\r\n        );\r\n        if ( this.props.loading ) {\r\n            form = <Spinner />;\r\n        }\r\n        return (\r\n            <div className={classes.ContactData}>\r\n                <h4>Enter your Contact Data</h4>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token: state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));","import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport CheckoutSummary from '../../components/Order/CheckoutSummary/CheckoutSummary';\r\nimport ContactData from './ContactData/ContactData';\r\n\r\nclass Checkout extends Component {\r\n\r\n    checkoutCancelledHandler = () => {\r\n        this.props.history.goBack();\r\n    }\r\n\r\n    checkoutContinuedHandler = () => {\r\n        this.props.history.replace( '/checkout/contact-data' );\r\n    }\r\n\r\n    render () {\r\n        let summary = <Redirect to=\"/\" />\r\n        if ( this.props.ings ) {\r\n            const purchasedRedirect = this.props.purchased ? <Redirect to=\"/\"/> : null;\r\n            summary = (\r\n                <div>\r\n                    {purchasedRedirect}\r\n                    <CheckoutSummary\r\n                        ingredients={this.props.ings}\r\n                        checkoutCancelled={this.checkoutCancelledHandler}\r\n                        checkoutContinued={this.checkoutContinuedHandler} />\r\n                    <Route\r\n                        path={this.props.match.path + '/contact-data'}\r\n                        component={ContactData} />\r\n                </div>\r\n            );\r\n        }\r\n        return summary;\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n    }\r\n};\r\n\r\nexport default connect( mapStateToProps )( Checkout );","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst input = (props) => {\r\n\r\n\tlet inputElement = null;\r\n\tconst inputClasses = [classes.InputElement]\r\n\r\n\tif(props.invalid && props.shouldValidate && props.touched) {\r\n\t\tinputClasses.push(classes.Invalid)\r\n\t}\r\n\r\n\tswitch(props.elementType) {\r\n\t\tcase('input'):\r\n\t\t\tinputElement = <input \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig} \r\n\t\t\t\tonChange={props.changed}\r\n\t\t\t\tvalue={props.value}/>\r\n\t\t\tbreak;\r\n\r\n\t\tcase('textarea'):\r\n\t\t\tinputElement = <textarea \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig} \r\n\t\t\t\tonChange={props.changed}\t\r\n\t\t\t\tvalue={props.value}/>\r\n\t\t\tbreak;\r\n\r\n\t\tcase('select'):\r\n\t\t\tinputElement = (<select \r\n\t\t\t\tclassName={inputClasses.join(' ')} \r\n\t\t\t\t{...props.elementConfig}\r\n\t\t\t\tonChange={props.changed} \r\n\t\t\t\tvalue={props.value}>\r\n\t\t\t\t{props.elementConfig.options.map(option => (\r\n\t\t\t\t\t<option key={option.value} value={option.value}>\r\n\t\t\t\t\t\t{option.displayValue}\r\n\t\t\t\t\t</option>\r\n\t\t\t\t))}\r\n\t\t\t\t</select>\r\n\t\t\t)\r\n\t\t\tbreak;\r\n\r\n\t\tdefault:\r\n\t\t\tinputElement = <input className={inputClasses.join(' ')} {...props.elementConfig} value={props.value}/>\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className={classes.Input}>\r\n\t\t\t<label className={classes.Label}>{props.label}</label>\r\n\t\t\t{inputElement}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default input;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__2JHz7\",\"Label\":\"Input_Label__2rmU9\",\"InputElement\":\"Input_InputElement__3UQ5K\",\"Invalid\":\"Input_Invalid__2dmWw\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__y-Yn7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__38GuY\"};"],"sourceRoot":""}